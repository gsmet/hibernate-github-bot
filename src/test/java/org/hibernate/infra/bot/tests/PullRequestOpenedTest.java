package org.hibernate.infra.bot.tests;

import static io.quarkiverse.githubapp.testing.GitHubAppTesting.given;
import static io.quarkiverse.githubapp.testing.GitHubAppTesting.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;

import java.io.IOException;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import org.junit.jupiter.api.Test;

import io.quarkiverse.githubapp.testing.GitHubAppTestingResource;
import io.quarkus.test.common.QuarkusTestResource;
import io.quarkus.test.junit.QuarkusTest;
import org.kohsuke.github.GHEvent;
import org.kohsuke.github.GHPullRequest;
import org.kohsuke.github.GHPullRequestCommitDetail;
import org.kohsuke.github.PagedIterable;
import org.kohsuke.github.PagedIterator;

@QuarkusTest
@QuarkusTestResource(GitHubAppTestingResource.class)
public class PullRequestOpenedTest {

	@Test
	void titleEndsWithDot() throws IOException {
		when().payloadFromClasspath( "/pullrequest-opened-title-ends-with-dot.json" )
				.event( GHEvent.PULL_REQUEST )
				.then()
				.github( mocks -> {
					verify( mocks.pullRequest( 585627026 ) )
							.comment( "Thanks for your pull request!\n"
									+ "\n"
									+ "Your pull request does not follow our contribution requirements. Could you have a look?\n"
									+ "\n"
									+ "- title should not end with a dot\n"
									+ "\n"
									+ "> This message is automatically generated by a bot." );
					verifyNoMoreInteractions( mocks.ghObjects() );
				} );
	}

	@Test
	void commitMessageNotStartingWithIssueKey() throws IOException {
		given()
				.github( mocks -> {
					mocks.configFileFromString(
							"hibernate-github-bot.yml",
							"jira:\n"
									+ "  projectKey: \"HSEARCH\"\n"
					);

					List<GHPullRequestCommitDetail> commitDetailsMocks = Arrays.asList(
							mock( GHPullRequestCommitDetail.class ),
							mock( GHPullRequestCommitDetail.class )
					);
					whenListCommits( mocks.pullRequest( 585627026 ), commitDetailsMocks );

					GHPullRequestCommitDetail.Commit commit0Mock = mock( GHPullRequestCommitDetail.Commit.class );
					when( commitDetailsMocks.get( 0 ).getCommit() ).thenReturn( commit0Mock );
					when( commit0Mock.getMessage() ).thenReturn( "HSEARCH-1111 Correct message" );

					GHPullRequestCommitDetail.Commit commit1Mock = mock( GHPullRequestCommitDetail.Commit.class );
					when( commitDetailsMocks.get( 1 ).getCommit() ).thenReturn( commit1Mock );
					when( commit1Mock.getMessage() ).thenReturn( "Incorrect message" );
					when( commitDetailsMocks.get( 1 ).getSha() ).thenReturn(
							"06b6d27ba19615d14cdcd509d9eb3334e5571bf2" );
				} )
				.when()
				.payloadFromClasspath( "/pullrequest-opened-hsearch-1111.json" )
				.event( GHEvent.PULL_REQUEST )
				.then()
				.github( mocks -> {
					verify( mocks.pullRequest( 585627026 ) ).listCommits();
					verify( mocks.pullRequest( 585627026 ) )
							.comment( "Thanks for your pull request!\n"
									+ "\n"
									+ "Your pull request does not follow our contribution requirements. Could you have a look?\n"
									+ "\n"
									+ "- all commit messages should start with a JIRA issue key matching pattern 'HSEARCH-\\d+'"
									+ " (offending commits: [06b6d27ba19615d14cdcd509d9eb3334e5571bf2])\n"
									+ "\n"
									+ "> This message is automatically generated by a bot." );
					verifyNoMoreInteractions( mocks.ghObjects() );
				} );
	}

	@Test
	void titleOrBodyNotMentioningCommitIssueKey() throws IOException {
		given()
				.github( mocks -> {
					mocks.configFileFromString(
							"hibernate-github-bot.yml",
							"jira:\n"
									+ "  projectKey: \"HSEARCH\"\n"
					);

					List<GHPullRequestCommitDetail> commitDetailsMocks = Arrays.asList(
							mock( GHPullRequestCommitDetail.class ),
							mock( GHPullRequestCommitDetail.class )
					);
					whenListCommits( mocks.pullRequest( 585627026 ), commitDetailsMocks );

					GHPullRequestCommitDetail.Commit commit0Mock = mock( GHPullRequestCommitDetail.Commit.class );
					when( commitDetailsMocks.get( 0 ).getCommit() ).thenReturn( commit0Mock );
					when( commit0Mock.getMessage() ).thenReturn( "HSEARCH-1111 Commit 1" );

					GHPullRequestCommitDetail.Commit commit1Mock = mock( GHPullRequestCommitDetail.Commit.class );
					when( commitDetailsMocks.get( 1 ).getCommit() ).thenReturn( commit1Mock );
					when( commit1Mock.getMessage() ).thenReturn( "HSEARCH-1112 Commit 2" );
				} )
				.when()
				.payloadFromClasspath( "/pullrequest-opened-hsearch-1111.json" )
				.event( GHEvent.PULL_REQUEST )
				.then()
				.github( mocks -> {
					verify( mocks.pullRequest( 585627026 ) ).listCommits();
					verify( mocks.pullRequest( 585627026 ) )
							.comment( "Thanks for your pull request!\n"
									+ "\n"
									+ "Your pull request does not follow our contribution requirements. Could you have a look?\n"
									+ "\n"
									+ "- all JIRA issues addressed by commits should be mentioned in the PR title or body,"
									+ " preferably using a link"
									+ " (issues not mentioned: [HSEARCH-1112])\n"
									+ "\n"
									+ "> This message is automatically generated by a bot." );
					verifyNoMoreInteractions( mocks.ghObjects() );
				} );
	}

	private static void whenListCommits(GHPullRequest pullRequestMock,
			List<GHPullRequestCommitDetail> commitDetailsMocks) {
		PagedIterable<GHPullRequestCommitDetail> commitIterableMock = mock( PagedIterable.class );
		when( pullRequestMock.listCommits() )
				.thenReturn( commitIterableMock );

		Iterator<GHPullRequestCommitDetail> actualIterator = commitDetailsMocks.iterator();
		PagedIterator<GHPullRequestCommitDetail> commitIteratorMock = mock( PagedIterator.class );
		when( commitIterableMock.iterator() ).thenAnswer( ignored -> commitIteratorMock );
		when( commitIteratorMock.next() ).thenAnswer( ignored -> actualIterator.next() );
		when( commitIteratorMock.hasNext() ).thenAnswer( ignored -> actualIterator.hasNext() );
	}

}
